#!/usr/bin/perl -w
use SeqIterator;
use PolyaPeak;
use PolyPeak;
use Bioseq;
use Pod::Usage;
use strict;


my %config= ( window1 => 40, window2 => 20, minlength => 32,
    lhratio => 2.8, hlength => 27, llength => 40,
    maxlength => 999999,
    shortread => 0);
# for short sequences such as 454, the windown1 and
# window2 value should be shorter 25 15
# hlength is the length of high complexity region
# llength is the length of low complexity region
# for 454, the longest EST is about 330 if longer
# than this then something is wrong.
### still needs a lots of polish ######
### all softwares needs endless polish if they are dealing
### with realy tough issues

#my $infile="EST.fas";
my ($infile, $outfile, $logfile);
#my $outfile="cleanEST.fas";
my $DEBUG=0;
if (@ARGV < 1) {
    pod2usage(1);
}

my $i=0;
while ($ARGV[$i]) {
    if ($ARGV[$i] eq '-o') { $outfile=$ARGV[++$i]; }
    elsif ($ARGV[$i] eq '-w1') { $config{window1}=$ARGV[++$i]; }
    elsif ($ARGV[$i] eq '-w2') { $config{window2}=$ARGV[++$i]; }
    elsif ($ARGV[$i] eq '-min') { $config{minlength}=$ARGV[++$i]; }
    elsif ($ARGV[$i] eq '-max') { $config{maxlength}=$ARGV[++$i]; }
    else {
        if ($ARGV[$i] =~ /^-/) {
            warn "option $ARGV[$i] not supported\n";
            pod2usage(1);
        }
        $infile=$ARGV[$i];
    }
    ++$i;
}
if (!$infile) { pod2usage(1); }

my $walker=SeqIterator->new($infile);
my $counter=0;
#my $good2badRatio=2.8;
my $stem=fileStem($infile);
if (!$outfile) { $outfile = $stem . "clean.fas"; }
open OU, ">$outfile" or die $!;
my $Cnnottrimfile=$stem . "_Cnnottrim.fas";
open SEQ, ">$Cnnottrimfile" or die $!;
my $longafter=$stem . "_longseqaftertrim.fas";
open LONG, ">$longafter" or die $!;
$logfile=fileStem($infile) . 'rmpolya.log';
open LOG, ">$logfile" or die $!;

#while (($seq=$walker->next) && $counter < 100000) {
my ($changed, $seq, $withpacnt, %longafter);
my $badcnt=0;
my %seqlength=();
while ($seq=$walker->next) {
    #print STDERR $walker->header, "\n";
    ++$counter;
    ++$seqlength{length($seq)};
    $changed=0;
    $seq=uc($seq);
    $changed=simpleTrim(\$seq);
    if ($seq && (length($seq) < $config{minlength} || isJunk($seq))
     ) {
        ++$badcnt;
        next;
    }

    #if (length($seq)>$config{maxlength}) {
    #    print LOG $walker->header, " Sequence too long\n";
    #    printSeq($seq, *LOG);
    #}
    my @ntseq= split //, $seq;
    my ($caref1, $caref2, $cp);
    if ($seq =~ /A{12,}/ || $seq =~ /T{12,}/) {
        if ($DEBUG) {
            print LOG "Sequence with 12 or more A or T\n", $walker->header, "\n";
            printSeq($seq, *LOG);
        }
# this operation will alter the sequence if in such 
        # case then @ntseq needs to be regenerated
        ($cp, $caref1) = complexityTrim(\$seq, \@ntseq, $config{window1});
        if ($cp != 0) { @ntseq = split //, $seq; }
        if ($cp > 1) { 
            ++$changed; 
        }
        ($cp, $caref2) =complexityTrim(\$seq, \@ntseq,  $config{window2});
        if ($cp != 0) { @ntseq = split //, $seq; }
        if ($cp < 0 || $cp == 1) {
            ++$changed;
            $seq='';
        }
    }
    else { $caref2 = 0; }
    if ($seq =~ /A{10,}/) { # checking for shorter polyA
        if (!$caref2) { 
            $caref2 = computeComplexity(\@ntseq, $config{window2}); 
        }
        if ($config{shortread}) {
            shortReadPolyA(\$seq, \@ntseq, $caref2);
        }
        else {
            removePolyA(\$seq, \@ntseq, $caref2);
        }
    }
    if (!$caref2) {
        $caref2= computeComplexity(\@ntseq, $config{window2}); 
    }
    if ($seq =~ /T{9,}/) {
        removePolyT(\$seq, \@ntseq, $caref2);
    }
    if ($seq && length($seq) > $config{minlength}) {
        print OU ">", $walker->header, "\n";
        printSeq($seq, *OU);
        if (length($seq)>$config{maxlength}) {
            ++$longafter{length($seq)};
            print LONG $walker->header, "\n";
            printSeq($seq, *LONG);
        }
    }
    else { ++$changed; }
    if ($changed) { ++$badcnt; }
}
print STDERR "$counter sequences processed, $badcnt altered,  all good written to $outfile. Some strange written to $logfile\n";
open LEN, ">rawseqlendistr.tab" or die;
foreach my $l (sort { $a <=> $b } keys %seqlength) {
    print LEN $l, "\t", $seqlength{$l}, "\n";
}
open LEN, ">longaftertrimdistr.tab" or die;
foreach my $l (sort { $a <=> $b } keys %longafter) {
    print LEN $l, "\t", $longafter{$l}, "\n";
}

###############################################

# return 1 for simple sequence
# return 2 for start bad
# return 3 for end bad
# return 5 for both start and end bad
# return 0 if sequence good
# return a negative number if too short
sub complexityTrim {
    my $strref=shift; # reference to sequence as string
    my $seqarray=shift; # sequence in array format
    my $wd=shift; # window sieze normally 20 or 40
    my $carray = computeComplexity($seqarray, $wd);

    if (length($$strref) <= $wd) {
        return (-1, $carray);
    }

    my $cstr=join('', @$carray); # complexity array and string
    if ($DEBUG) {
        print LOG "complexity string with window size: $wd\n";
        printSeq($cstr, *LOG);
        print LOG "\n";
    }
    #if ($cstr =~ /^[0-3]+$/) {
    if (isSimple($carray)) { # more accurate
        if ($DEBUG) { 
            print LOG ">>> > Garbage sequence < <<<<<<\n"; 
            printSeq($$strref, *LOG);
        }
        return (1, $carray);
    }

    my $rv=0;
    my $x=0;
#### processing the end of the sequence #####
# so that we can still use the start of the index
    my $junkstart=0;
    if ($cstr =~ /([01]+)$/g) {
        $junkstart=pos($cstr) - length($1);
    }
    elsif ($cstr =~ /([01]+)([0-6]+?)$/g) {
        if (length($1) / length($2) > $config{lhratio}
            || (length($1) > $config{llength} && length($2) < $config{hlength})) {
            $junkstart=pos($cstr) - length($1) - length($2);
            if ($junkstart < 10) {
                die "Junk end is too close to the start!\n";
            }
        }
    }
#### GGGGGGGOODSEQXJUNKSTART+++++
    if ($junkstart) {
        if ($DEBUG)  {
            if ($junkstart > length($$strref)) {
                print STDERR "$cstr\n";
                die "$junkstart ouside $$strref\n"
            }
            print LOG "Junk to be processed from the end $junkstart\n", 
                substr($$strref, $junkstart), "\n";
        }
        my @teststr=qw(AAAAAA CCCCCC GGGGGG TTTTTT N);
        my $minx=length($$strref);
        foreach my $ts (@teststr) {
            $x=index($$strref, $ts, $junkstart);
            if ($x > -1 && $x < $minx) { $minx=$x; }
        }
        if ($minx == length($$strref)) {
            if ($DEBUG) {
                print LOG "No Polymer or N in bad region. The sequence may not have a bad end after all.\n";
            }
        }
        else {
            if ($DEBUG) {
                print LOG "**** Bad end located at: ", $junkstart, "\n";
                print LOG "Junk sequence to remove:\n", substr($$strref, $minx), "\n";
            }
            $$strref=substr($$strref, 0, $minx);
            #print STDERR "cstr before\n$cstr\n";
            $cstr=substr($cstr, 0, $minx);
            #print STDERR "cstr after\n$cstr\n";
            $rv += 2;
        }
    }

####### working on begining of the sequence ##############
    my $junkend=0;
    if ($cstr =~ /^[01]+/g) {
        $junkend=pos($cstr); # index 1-after the junk region
    }
    elsif ($cstr =~ /^([0-5]+?)([01]+)/g) {
        if (length($2) / length($1) > $config{lhratio}
            || (length($2) > $config{llength} && length($1) < $config{hlength})) {
            $junkend=pos($cstr);
        }
    }
    if ($junkend) {
        if ($junkend > length($$strref)) {
            die "$junkend of string: \n", $$strref, "  \ncstr:\n$cstr\n";
        }
        my $tmp=substr($$strref, $junkend, $wd);
        if ($DEBUG) {
            print LOG "Junk region end index in complexity string $junkend\n";
            print LOG "last window of junk seq: $tmp\n";
        }

        while ($tmp =~ /N/g) { $x=pos $tmp; }
        while ($tmp =~ /A{6,}|C{6,}|G{6,}|T{6,}/g) {
            $x=pos($tmp);
        }
        if ($DEBUG) {
            if ($x) {
                print LOG "extended the junk in last window by $x\n";
            }
            else {
                print LOG "no extension of junk in the last window\n";
            }
        }
        my $endpos=$junkend + $x;
        if ($DEBUG) {
            print LOG "junk at start to throw away: ", substr($$strref, 0, $endpos), 
                "\nfrom\n$$strref\n";
        }
        if (length($$strref) <= $endpos) {
            die "endpos $endpos outside string\n$$strref\ncstr\n$cstr\n";
        }
        $$strref=substr($$strref, $endpos);
        $rv += 3;
    }
    return ($rv, $carray);
}

# return a reference to the complexity array
sub computeComplexity {
    my $ntseq=shift; # reference to seq in array format
    my $wd=shift;
    #my @ntseq= split //, $$strref;
    my @carray;
    my $L=@$ntseq-$wd-1;
    if ($L <= 0) {
        warn "sequence shorter than window length $wd\n";
        return undef;
    }
    my ($i,$j);
# initialize the change value
    my $change=0;
    for ($j=0; $j<$wd; $j++) { 
        if (differentBase($ntseq->[$j], $ntseq->[$j+1])) {
            ++$change;
        }
    }
    $i=0;
    while (1) {
# old method is n square, we will make it linear
        $carray[$i] =int(($change/$wd)*9);
        if ($i>=$L) { last; }
        if (differentBase($ntseq->[$i], $ntseq->[$i+1])) {
            --$change;
        }
        $j=$i+$wd;
        if (differentBase($ntseq->[$j], $ntseq->[$j+1])) {
            ++$change;
        }
        ++$i;
    }
    return \@carray;
}

sub differentBase {
    my $b1=shift;
    my $b2=shift;
    if ($b1 ne $b2 && $b1 ne 'N' && $b2 ne 'N') {
        return 1;
    }
    else { return 0; }
}

sub simpleTrim {
    my $strref=shift;
    my $chg=0;
    if ($$strref =~ s/^[AC]{1,2}T{10,}// ||
        $$strref =~ s/^A{1,2}T{10,}// ||
        $$strref =~ s/^C{1,2}T{4,}A{4,}//) { ++$chg; }
    while ($$strref =~ s/N[ACGT]{0,6}$//) {
        ++$chg; # changed
    }
    if ($$strref =~ /A{17,}[CGTN]$/) {
        chop $$strref;
        ++$chg; 
    }
    while ($$strref =~ s/^[ACGT]{0,6}N//) { ++$chg; }
    if ($$strref =~ /^[ACGN]T{17,}/) {
        $$strref = substr($$strref, 1);
        ++$chg;
    }
    if ($$strref =~ s/^[NT]{6,}// 
        || $$strref =~ s/^[ACGN]{1,2}[NT]{6,}//
        || $$strref =~ s/^[ACGT]{1,18}T{14,}//
        || $$strref =~ s/^[ACGT]{1,7}T{8,}//
        || $$strref =~ s/^[ACGT]{1,7}T{7,}CT{7,}//
     ) { ++$chg; }
    if ($$strref =~ s/[NA]{6,}$// || $$strref =~ s/[NA]{6,}[CGT]{1,2}$//) { ++$chg; }
    $$strref =~ s/A{12,}[CGT][ACGTN]{,22}$//;
    if ($$strref =~ /(.+)[NA]{28,}(.+)/) {
        my $str1=$1;
        my $str2=$2;
        if (length($str1)>length($str2) || length($str1)>400) {
            $$strref=$str1;
        }
    }
    if ($$strref =~ /^(.+)T{26,}(.+)/) {
        if (length($1) < 40) {
            $$strref=$2;
        }
    }
    while ($$strref =~ /([ACGT]+)X+([ACGT]+)/) {
        if (length($1) > 170 || length($1)>length($2)) { $$strref=$1; }
        else { $$strref=$2; }
        ++$chg;
    }
    while ($$strref =~ s/N+[ACGT]{0,18}$//) { ++$chg; }
    while ($$strref =~ /([ACGT]+)N{3,}([ACGT]+)/) {
        if (length($1) > 160 || length($1)>length($2)) { $$strref=$1; }
        else { $$strref=$2; }
        ++$chg;
    }
    return $chg;
}

sub isSimple {
    my $carr_ref=shift;
    my %chash;
    my $low=0; 
    my $high=0; # low and high complexity region, by 4
    foreach my $c (@$carr_ref) {
        ++$chash{$c};
    }
    foreach my $c (keys %chash) {
        if ($c < 4) {
            $low += $chash{$c};
        }
        else {
            $high += $chash{$c};
        }
    }
    if ($low/($low+$high) > 0.9) {
        return 1;
    }
    return 0;
}

# helper for shortReadPolyA
sub isAAPair {
    my $b1=shift;
    my $b2=shift;
    if (($b1 eq 'A' || $b1 eq 'N') && ($b2 eq 'A' || $b2 eq 'N')) {
        return 1;
    }
    else { return 0; }
}
sub isTTPair {
    my $b1=shift;
    my $b2=shift;
    if (($b1 eq 'T' || $b1 eq 'N') && ($b2 eq 'T' || $b2 eq 'N')) {
        return 1;
    }
    else { return 0; }
}

sub isPair {
    my $b1=shift;
    my $b2=shift;
    my $b=shift;
    if (($b1 eq $b || $b1 eq 'N') && ($b2 eq $b || $b2 eq 'N')) {
        return 1;
    }
    else { return 0; }
}

# @param \@seqchar, "base A C G T"
sub collectPeaks {
    #my $seqref=shift; # as reference
    my $seqarr=shift;
    my $base=shift; # A C G or T
    if ($base ne 'A' && $base ne 'C' && $base ne 'G' && $base ne 'T') {
        die "wront base $base\n";
    }
    my $wd=10; # window sieze

    my @carray;
    my $L=@$seqarr-$wd-1;
    if ($L <= 0) {
        warn "sequence shorter than window length $wd\n";
        return $L;
    }
    my ($i,$j);
# initialize the change value
    my $change=0;
    for ($j=0; $j<$wd; $j++) { 
        if (isPair($seqarr->[$j], $seqarr->[$j+1], $base)) {
            ++$change;
        }
        else { --$change; }
    }
    $i=0;
    while (1) {
        $carray[$i] =$change/2; # number from -5 to + 5
        if ($i>=$L) { last; }
        if (isPair($seqarr->[$i], $seqarr->[$i+1], $base)) {
            --$change;
        }
        else { ++$change; }
        $j=$i+$wd;
        if (isPair($seqarr->[$j], $seqarr->[$j+1], $base)) {
            ++$change;
        }
        else { --$change; }
        ++$i;
    }
# find peak information
    $i=0;
    my @peaks=();
    my $pk;
    while ($i<@carray) {
        if ($carray[$i] == 0) {
            my ($peakB, $peakE, $avgComplexity1, $avgComplexity2);
            while ($i < @carray && $carray[$i] == 0) { ++$i; }
            last if ($i >= @carray);
            next if ($carray[$i] < 0);
            $peakB=$i; # position after zero 
            my ($area, $max, $maxi);
            $area=0; $max=0;
            while ($i < @carray && $carray[$i] >= 0) {
                $area += $carray[$i];
                if ($carray[$i] > $max) { 
                    $max=$carray[$i]; 
                    $maxi=$i;
                }
                ++$i;
            }
            $pk = PolyPeak->new($peakB, $i, $area, $max, $maxi);
            push @peaks, $pk;
        }
        else { ++$i; }
    }
    return \@peaks;
}

sub removePolyA {
    my $seqref=shift;
    my $seqarr=shift;
    my $comparr=shift;
    my $Apeak=collectPeaks($seqarr, 'A');
    #print STDERR scalar(@$Apeak), " polyA peaks\n";
    if (@$Apeak < 1) {
        #print STDERR "no polyA peak\n";
        return;
    }
    my $i=$#{$Apeak};
    my $seqend=@$seqarr-1;
    while ($i > -1) {
        if ($seqend - $Apeak->[$i]->end < 30 || 
            ($seqend - $Apeak->[$i]->end < 45 || $Apeak->[$i]->area > 20)) {
            #$Apeak->[$i]->show(*LOG);
            #print LOG "Can be removed\n";
            $seqend=$Apeak->[$i]->begin;
        }
        --$i;
    }
    if ($seqend < @$seqarr-1) {
        $$seqref=substr($$seqref, 0, $seqend);
        $$seqref =~ s/A+$//;
    }
}

# remove polyT if it is located near the 5' end of the 
# sequence
sub removePolyT {
    my $seqref=shift; # as reference
    my $seqarr=shift; # sequence as array
    my $comparr=shift; # complexity array
    my $wd=10; # window sieze

    my @carray;
    my $L=@$seqarr-$wd-1;
    if ($L <= 0) {
        warn "sequence shorter than window length $wd\n";
        return $L;
    }
    my ($i,$j);
# initialize the change value
    my $change=0;
    for ($j=0; $j<$wd; $j++) { 
        if (isTTPair($seqarr->[$j], $seqarr->[$j+1])) {
            ++$change;
        }
        else { --$change; }
    }
    $i=0;
    while (1) {
        $carray[$i] =$change/2; # number from -5 to + 5
        if ($i>=$L) { last; }
        if (isTTPair($seqarr->[$i], $seqarr->[$i+1])) {
            --$change;
        }
        else { ++$change; }
        $j=$i+$wd;
        if (isTTPair($seqarr->[$j], $seqarr->[$j+1])) {
            ++$change;
        }
        else { --$change; }
        ++$i;
    }
# find peak information
    $i=0;
    my @peaks=();
    my $pk;
    while ($i<@carray) {
        if ($carray[$i] == 0) {
            my ($peakB, $peakE, $avgComplexity1, $avgComplexity2);
            while ($i < @carray && $carray[$i] == 0) { ++$i; }
            last if ($i >= @carray);
            next if ($carray[$i] < 0);
            $peakB=$i; # position after zero 
            my ($area, $max, $maxi);
            $area=0; $max=0;
            while ($i < @carray && $carray[$i] >= 0) {
                $area += $carray[$i];
                if ($carray[$i] > $max) { 
                    $max=$carray[$i]; 
                    $maxi=$i;
                }
                ++$i;
            }
            $pk = PolyPeak->new($peakB, $i, $area, $max, $maxi);
            push @peaks, $pk;
        }
        else { ++$i; }
    }
    if (@peaks > 0) {
        #print LOG scalar(@peaks), " peaks:\n";
        $i=0;
        my $seqstart=0;
        my $newseq="";
        while ($i < @peaks) 
        {
            #$peaks[$i]->show(*LOG);
            if (($peaks[$i]->begin - $seqstart < 30 && $peaks[$i]->area > 9)
                || ($peaks[$i]->begin - $seqstart < 45 && $peaks[$i]->area > 20)) 
            {
                #print LOG "can be removed\n";
                $seqstart=$peaks[$i]->end;
            }
            ++$i;
        }
        if ($seqstart && (length($$seqref)-$seqstart)>20) {
            $newseq=substr($$seqref, $seqstart);
            if (!$newseq) {
                die "empty sequence after substr operation $$seqref\n";
            }
            $newseq =~ s/^T+//;
            #print LOG "oldseq\n$$seqref\nnewseq\n$newseq\n\n";
            $$seqref=$newseq;
        }
        else { $$seqref=""; }
    }
}

sub averageComplexity {
    my $comparr=shift;
    my $b=shift;
    my $e=shift;
    my $sum=0;
    if ($b > @$comparr) {
        #warn "range start $b befound end of complexity array\n";
        return 0;
    }
    if ($e > @$comparr) {
        #warn "range end befound end of complexity array\n";
        $e=@$comparr;
    }
    return 0 if ($e==$b);
    if ($e < $b) {
        die "begin more than end\n";
    }
    for (my $i=$b; $i<$e; $i++) {
        $sum += $comparr->[$i];
    }
    $sum /= ($e-$b);
    return $sum;
}

=head2 cutPeak

    @param: $seqref, $seqarray_ref, $complexity_array_ref, PolyaPeak

    return true if the peak has been removed otherwise
    return false

=cut
sub cutPeak {
    my $seqref=shift;
    my $saref=shift;
    my $caref=shift;
    my $pk=shift;

    my $avgcx1 = averageComplexity($caref, 0, $pk->{begin}); 
# complexity array after peak length
    my $wd=PolyaPeak->windowsize();
    my $tlen = scalar(@$caref) - $pk->end - $wd;
    my $avgcx2 = averageComplexity($caref, $pk->end + $wd, scalar(@$caref));
    if ($pk->begin > $tlen
        && ($avgcx1 > $avgcx2-0.3 || 
            ($avgcx1 > 5 && ($tlen < 50 || $pk->begin > 150))
            )
    ) {
        my $cutsize=scalar(@$saref) - $pk->peakStart;
        $$seqref = substr($$seqref, 0, $pk->peakStart);
        $#{$saref} -= $cutsize;
        $#{$caref} -= $cutsize;
        return 1;
    }
    else {
        print LOG "subseq of peak + wd: ", 
            substr($$seqref, $pk->begin, $pk->width+PolyaPeak->windowsize),
                "\navg complexity before peak: $avgcx1",
                "\navg complexity after peak: $avgcx2\n";
        print LOG "Failed to cut away peak\n";
        $pk->show(*LOG);
        printSeq($$seqref, *LOG);
        print LOG join('', @$caref), "\n";

        ++$withpacnt;
        print SEQ ">seq$withpacnt\n";
        printSeq($$seqref, *SEQ);
        return 0;
    }
}

# input \$seq
sub shortReadPolyA {
    my $seqref=shift; # as reference
    my $seqarr=shift;
    my $comparr=shift; # complexity array
    my $wd=10; # window sieze
    if ($$seqref =~ s/(A{9,}[ACGTN]{1,9})$//) {
        my $polyalen = length($1);
        if ($$seqref !~ /A{9,}/) {
            return;
        }
        else {
            $#{$seqarr} -= $polyalen;
            $#{$comparr} -= $polyalen;
        }
    }

    my @carray;
    my $L=@$seqarr-$wd-1;
    if ($L <= 0) {
        warn "sequence shorter than window length $wd\n";
        return $L;
    }
    my ($i,$j);
# initialize the change value
    my $change=0;
    for ($j=0; $j<$wd; $j++) { 
        if (isAAPair($seqarr->[$j], $seqarr->[$j+1])) {
            ++$change;
        }
        else { --$change; }
    }
    $i=0;
    while (1) {
        $carray[$i] =$change/2; # number from -5 to + 5
        if ($i>=$L) { last; }
        if (isAAPair($seqarr->[$i], $seqarr->[$i+1])) {
            --$change;
        }
        else { ++$change; }
        $j=$i+$wd;
        if (isAAPair($seqarr->[$j], $seqarr->[$j+1])) {
            ++$change;
        }
        else { --$change; }
        ++$i;
    }
# find peak information
    $i=0;
    my @peaks=();
    my @discardedPeaks=();
    my $pk;
    while ($i<@carray) {
        if ($carray[$i] == 0) {
            my ($peakB, $peakE, $avgComplexity1, $avgComplexity2);
            while ($i < @carray && $carray[$i] == 0) { ++$i; }
            last if ($i >= @carray);
            next if ($carray[$i] < 0);
            $peakB=$i; # position after zero 
            my ($area, $max, $maxi);
            $area=0; $max=0;
            while ($i < @carray && $carray[$i] >= 0) {
                $area += $carray[$i];
                if ($carray[$i] > $max) { 
                    $max=$carray[$i]; 
                    $maxi=$i;
                }
                ++$i;
            }
            #$peakE=$i; # at zero
            $pk = PolyaPeak->new($peakB, $i, $area, $max, $maxi);
            if ($area > 25 || $pk->width > 7 || $pk->height > 1) {
                push @peaks, $pk;
            }
            elsif ($area > 4) {
                push @discardedPeaks, $pk;
            }
        }
        else { ++$i; }
    }
    if (@peaks == 0) { # no peaks saved but skipped
        if (@discardedPeaks > 0) {
            printSeq($$seqref, *LOG);
            print LOG join('', @carray), "\n";
            print LOG "no large peaks found\n",
                scalar(@discardedPeaks), " peaks discarded\n";
            foreach $pk (@discardedPeaks) {
                $pk->show(*LOG);
            }
        }
# no peaks detected no polyA
    }
    else {
        $i=$#peaks;
        while ($i > -1 && 
            cutPeak($seqref, $seqarr, $comparr, $peaks[$i]) )
        {
            --$i;
        }
        if ($i < $#peaks) { # actually removed peaks
            $#peaks = $i;
            if (@peaks > 0) {
# then use the lasrgest peak to curve
                my $maxAreaIdx=0;
                my $maxArea=0;
                for ($i=0; $i<@peaks; $i++) {
                    if ($peaks[$i] > $maxArea) {
                        $maxArea=$peaks[$i];
                        $maxAreaIdx=$i;
                    }
                }
                $pk=$peaks[$maxAreaIdx];
                print LOG "max peak after elimination:\n";
                $pk->show(*LOG); 
                print LOG "\nTrying to cut it again\n";
                cutPeak($seqref, $seqarr, $comparr, $peaks[$maxAreaIdx]);
            }
        }
    }
}

sub isJunk {
   my $seq=shift;
# >JGI_CAHC5309.rev
#    CCCCCAAAACCCCAGGGGGTGAAATTACAAAAGGGATGGAAAATTGGGGCAAAACAGGAAAGGTAAAGGG
#    GAACCCCCCCCCAAACAAACCCCCCCCGGGGGGGGGGCCCCCCCCCCCAATGGAAAAAAAGGGCGGAAAC
#    AACGGGGAAAACTCCCCCGCCCATTCCCAAGGGGGGGCCCCAAAAGGAGAACAAACAGCCTGGAAAAAAG
#    GGGCAAAACCGGGCAAAAAAGGACCACCGGGGGGGGGGCCCGGGACCCGGGACCAAAGGGAAAGAAGGAC
#    TTTCAAAAAAGCCAGGGGGGGGAACCATTGACCCCCCAAAAAACCCGGGGAAAACGGGCCATGGGAATTG
#    AGGGGGGGGGGGAAAACCTGGGCCGGAAAACAAACCTTGGGGGGCCGAACCCGGGGTCC
# junk sequence from the sequencer usually has high percentage of 
# repeats
    my @bases=('A', 'C', 'G', 'T');
    my $len=0;
    foreach my $b (@bases) {
        my $pattern=$b . 'N';
        while ($seq =~ /([$pattern]{6,})/g) {
            $len += length($1);
        }
    }
    return $len/length($seq) > 0.27;
}

# the shortes string before the first period "."
# use the one from Bioseq
#sub fileStem {
#    my $f=shift;
#    if ($f =~ /^(.+?)\./) {
#        return $1;
#    }
#    else { return $f; }
#}

__END__

=head1 NAME

rmpolya - remove poly A and junk sequences from EST ends

=head1 SYNOPSIS

 rmpolya EST.fas 
 this program will produce ESTclean.fas

 rmpolya -o cleanEST.fas EST.fas
 use the -o option to specify the name of the output file

=head1 DESCRIPTION

Removes polyA from EST 3' ends and polyT from the 5' end.
It also remove low-complexity regions from the ends.

The output file contains all good sequences.  Very bad
sequences will not be saved into this output file.

=head1 Options

    -o <outpuf file name>
    -w1 <first window size> default 40. This is good for longer
        reads such as Sanger sequence. But Sanger is going away
        soon.
    -w2 <second window size> default 20
        for 454 sequence the -w1 35 -w2 15 might be better
    -min <min sequence length> default 32
        Shortest sequence to save. If sequence is shorter than
        this value after trimming then it is not saved. For Sanger
        sequence this should be set to 50.  For short read this
        might be fine.
    -max <max sequence length> EST are one pass sequence, this
        should be set to a proper length according to the 
        sequence technology used. For sanger 1000 should be set.
        Exceptionaly long sequences could be generated by
        abnormal behavior of sequencing machines. This is to 
        catch those cases.

=cut
